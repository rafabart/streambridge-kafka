spring:

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  cloud:
    stream:
      default-binder: kafka

      rabbit:
        bindings:
          customer-topic-binder-amqp:
            binder: rabbit
            destination: customer-topic-binder-amqp

      kafka:
        binder:
          producer-properties:
            schema.registry.url: http://localhost:8085
          brokers:
            - localhost:9092

        bindings:
          customer-topic-binder:
            destination: customer-topic
            producer:
              configuration:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer

          customer-topic-binder-bytes:
            destination: customer-topic-bytes

          customer-topic-binder-avro:
            destination: customer-topic-avro
            contentType: application/*+avro
            producer:
              configuration:
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
                value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer


#spring.cloud.stream.bindings.input.useNativeDecoding=true


#spring:
#  cloud:
#    stream:
#      kafka:
#        binder:
#          brokers: http://localhost:9092
#          auto-add-partitions: true
#          producer-properties:
#            schema.registry.url: http://localhost:8081
#      schema-registry-client:
#        endpoint: http://localhost:8081
#
#      bindings:
#        output-customer:
#          destination: employee-details
#          content-type: application/*+avro




#        binders:
#          producer:
#            type: kafka
#            environment:
#              spring:
#                cloud:
#                  stream:
#                    kafka:
#                      binder:
#                        autoCreateTopics: true
#                        autoAddPartitions: true
#                        producer-properties:
#                          key.serializer: org.apache.kafka.common.serialization.StringSerializer
#                          value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
#                          schema.registry.url: http://localhost:8081
#                        brokers: http://localhost:9092
#                    schema-registry-client:
#                      endpoint: http://localhost:8081