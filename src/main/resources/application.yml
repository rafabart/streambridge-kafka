spring:
  cloud:
    stream:

      # No caso de multiplos binders é preciso definir um como o padrão usado pela api.
      defaultBinder: kafka_key_bytes
      # É preciso definir as funções no caso de consumo automático na propriedade 'definition'.
      # Sem isso o consumidores não consomem as mesangens.
      function:
        definition: receiveAmqp;receiveKafka;receiveKafkaAvro;

# bindings são os tópicos e filas de destino ou consumo.
# É possível configurar algumas propriedades dos bindings de forma independete.
#Obs: Não é possível configurar a serialização/deserialização nos bindings, só no binders.
      bindings:
        producer-customer-exchange-amqp:
          binder: rabbit_amqp
          destination: customer-exchange-amqp
          producer:
            requiredGroups: customer-queue

        producer-customer-topic:
          binder: kafka_key_string
          destination: customer-topic

        producer-customer-topic-bytes:
          binder: kafka_key_bytes
          destination: customer-topic-bytes

        producer-customer-topic-avro:
          binder: kafka_avro_producer
          destination: customer-topic-avro
          contentType: application/*+avro
          useNativeEncoding: true

        receiveAmqp-in-0:
          binder: rabbit_amqp
          destination: customer-exchange-amqp
          consumer:
            group: customer-queue

        receiveKafka-in-0:
          binder: kafka_key_string
          destination: customer-topic

        receiveKafkaAvro-in-0:
          binder: kafka_avro_consumer
          destination: customer-topic-avro
          contentType: application/*+avro
          useNativeEncoding: true

# Bindes são as opçoes de ferramentas de envio de mensagens/streams. Ex: Kafka e RabbitMQ.
# É possível personalizar as configurações de cada binder de forma independente.
      binders:
        kafka_key_string:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      producer-properties:
                        key.serializer: org.apache.kafka.common.serialization.StringSerializer
                      brokers: http://localhost:9092

        kafka_key_bytes:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    default:
                      binder:
                        brokers: http://localhost:9092

        kafka_avro_producer:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      producer-properties:
                        #key.serializer: org.apache.kafka.common.serialization.StringSerializer
                        value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
                        schema.registry.url: http://localhost:8085
                      brokers: http://localhost:9092

        kafka_avro_consumer:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      consumer-properties:
                        value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                        schema.registry.url: http://localhost:8085
                        specific.avro.reader: true
                      brokers: http://localhost:9092

        rabbit_amqp:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest